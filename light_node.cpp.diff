--- ./deconz-rest-plugin/light_node.cpp	2017-02-18 00:29:09.617999771 +0100
+++ ./light_node.cpp	2017-02-18 00:18:54.388240886 +0100
@@ -37,6 +37,7 @@
    m_sceneCapacity(16)
 
 {
+	pushCode ( m_pushType = PUSH_TYPE_LIGHT );
 }
 
 /*! Returns the LightNode state.
@@ -68,6 +69,8 @@
 {
     if (m_manufacturerCode != code)
     {
+		pushSetNodeInfoCompName1 ( m_manufacturerCode, code, "manufacturerCode" );
+
         m_manufacturerCode = code;
 
         if (!m_manufacturer.isEmpty() && (m_manufacturer != QLatin1String("Unknown")))
@@ -148,6 +151,8 @@
  */
 void LightNode::setName(const QString &name)
 {
+	pushSetNodeInfoMemComp ( name );
+
     m_name = name;
 }
 
@@ -184,6 +189,8 @@
  */
 void LightNode::setOtauClusterId(uint16_t clusterId)
 {
+	pushSetNodeInfoComp ( m_otauClusterId, clusterId );
+
     m_otauClusterId = clusterId;
 }
 
@@ -220,11 +227,17 @@
     case DEV_ID_ZLL_ONOFF_LIGHT:
     case DEV_ID_ZLL_ONOFF_PLUGIN_UNIT:
         m_level = (m_isOn ? 255 : 0);
+		pushSetNodeInfoMem ( level );
+
+		pushSetNodeInfoName ( ( int ) m_level, "bri" );
+		pushSetNodeInfoName ( ( int ) ( ( m_level * 100 ) / 253 ), "pct" );
         break;
 
     default:
         break;
     }
+
+	pushSetNodeState ( on, (int) m_level );
 }
 
 /*! Returns the light dimm level (0..255).
@@ -258,6 +271,16 @@
     DBG_Assert(level <= 255);
     if (level <= 255)
     {
+		if ( m_level != level ) {
+			pushSetNodeInfo ( level );
+			pushSetNodeInfoName ( ( int ) level, "bri" );
+			if ( m_isOn )  {
+				pushSetNodeInfoName ( ( int ) ( ( level * 100 ) / 253 ), "pct" );
+			}
+			else {
+				pushSetNodeInfoName ( 0, "pct" );
+			}
+		}
         m_level = level;
     }
 }
@@ -277,6 +300,8 @@
     DBG_Assert(hue <= 254);
     if (hue <= 254)
     {
+		pushSetNodeInfoMemComp1 ( hue );
+
         m_hue = hue;
 
         m_normHue = ((double)hue * 360.0f / 254.0f) / 360.0f;
@@ -324,6 +349,7 @@
     m_hue = m_normHue * 254.0f;
     DBG_Assert(m_hue <= 254);
 
+	pushSetNodeInfoMemComp ( ehue );
     m_ehue = ehue;
 }
 
@@ -339,6 +365,8 @@
  */
 void LightNode::setSaturation(uint8_t sat)
 {
+	pushSetNodeInfoMemComp ( sat );
+
     m_sat = sat;
 }
 
@@ -361,6 +389,17 @@
         y = 65279;
     }
 
+	float x_ = ( float ) x / ( float ) 65279;
+	float y_ = ( float ) y / ( float ) 65279;
+
+	char xy [ 64 ];
+
+	snprintf ( xy, 64, "%.6f,%.6f", x_, y_ );
+	pushSetNodeInfoName ( xy, "xy" );
+
+	pushSetNodeInfoCompName1 ( m_colorX, x, "colorX" );
+	pushSetNodeInfoCompName1 ( m_colorY, y, "colorY" );
+
     m_colorX = x;
     m_colorY = y;
 }
@@ -393,6 +432,8 @@
  */
 void LightNode::setColorTemperature(uint16_t colorTemperature)
 {
+	pushSetNodeInfoMemComp ( colorTemperature );
+
     m_colorTemperature = colorTemperature;
 }
 
@@ -410,6 +451,8 @@
 {
     DBG_Assert((colorMode == "hs") || (colorMode == "xy") || (colorMode == "ct"));
     m_colorMode = colorMode;
+
+	pushSetNodeInfo ( colorMode );
 }
 
 /*! Sets the nodes color loop active state.
@@ -417,6 +460,8 @@
  */
 void LightNode::setColorLoopActive(bool colorLoopActive)
 {
+	pushSetNodeInfoMemComp ( colorLoopActive );
+
     m_colorLoopActive = colorLoopActive;
 }
 
@@ -431,6 +476,8 @@
  */
 void LightNode::setColorLoopSpeed(uint8_t speed)
 {
+	pushSetNodeInfoCompName ( m_colorLoopSpeed, speed, "colorLoopSpeed" );
+
     m_colorLoopSpeed = speed;
 }
 
@@ -527,6 +574,8 @@
  */
 void LightNode::setGroupCapacity(uint8_t capacity)
 {
+	pushSetNodeInfoCompName ( m_groupCapacity, capacity, "groupCapacity" );
+
     m_groupCapacity = capacity;
 }
 
@@ -542,6 +591,8 @@
  */
 void LightNode::setResetRetryCount(uint8_t resetRetryCount)
 {
+	pushSetNodeInfoMemComp ( resetRetryCount );
+
     m_resetRetryCount = resetRetryCount;
 }
 
@@ -557,6 +608,8 @@
  */
 void LightNode::setZdpResetSeq(uint8_t zdpResetSeq)
 {
+	pushSetNodeInfoMemComp ( zdpResetSeq );
+
     m_zdpResetSeq = zdpResetSeq;
 }
 
@@ -572,6 +625,8 @@
  */
 void LightNode::setGroupCount(uint8_t groupCount)
 {
+	pushSetNodeInfoMemComp ( groupCount );
+
     m_groupCount = groupCount;
 }
 
@@ -587,6 +642,8 @@
  */
 void LightNode::setSceneCapacity(uint8_t sceneCapacity)
 {
+	pushSetNodeInfoMemComp ( sceneCapacity );
+
     m_sceneCapacity = sceneCapacity;
 }
 
